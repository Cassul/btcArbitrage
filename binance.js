binance {
  isNode: true,
  keys: [Function: keys],
  values: [Function: values],
  extend: [Function: extend],
  clone: [Function: clone],
  index: [Function: index],
  ordered: [Function: ordered],
  unique: [Function: unique],
  keysort: [Function: keysort],
  indexBy: [Function: indexBy],
  groupBy: [Function: groupBy],
  filterBy: [Function: filterBy],
  sortBy: [Function: sortBy],
  flatten: [Function: flatten],
  pluck: [Function: pluck],
  omit: [Function: omit],
  sum: [Function: sum],
  deepExtend: [Function: deepExtend],
  uuid: [Function: uuid],
  unCamelCase: [Function: unCamelCase],
  capitalize: [Function: capitalize],
  isNumber: [Function: isFinite],
  isArray: [Function: isArray],
  isObject: [Function: isObject],
  isString: [Function: isString],
  isStringCoercible: [Function: isStringCoercible],
  isDictionary: [Function: isDictionary],
  hasProps: [Function: hasProps],
  prop: [Function: prop],
  asFloat: [Function: asFloat],
  asInteger: [Function: asInteger],
  safeFloat: [Function: safeFloat],
  safeInteger: [Function: safeInteger],
  safeValue: [Function: safeValue],
  safeString: [Function: safeString],
  toFixed: [Function: toFixed],
  truncate_to_string: [Function: truncate_to_string],
  truncate: [Function: truncate],
  precisionFromString: [Function: precisionFromString],
  json: [Function: json],
  unjson: [Function: parse],
  stringToBinary: [Function: stringToBinary],
  stringToBase64: [Function: stringToBase64],
  utf16ToBase64: [Function: utf16ToBase64],
  base64ToBinary: [Function: base64ToBinary],
  base64ToString: [Function: base64ToString],
  binaryToString: [Function: binaryToString],
  binaryConcat: [Function: binaryConcat],
  urlencode: [Function: urlencode],
  rawencode: [Function: rawencode],
  urlencodeBase64: [Function: urlencodeBase64],
  hash: [Function: hash],
  hmac: [Function: hmac],
  jwt: [Function: JSON_web_token],
  now: [Function: now],
  setTimeout_safe: [Function: setTimeout_safe],
  sleep: [Function: sleep],
  TimedOut: [Function: TimedOut],
  timeout: 10000,
  throttle:
   { [Function]
     refillRate: 0.002,
     delay: 1,
     capacity: 1,
     defaultCost: 1,
     maxCapacity: 1000,
     configure: [Function: configure] },
  aggregate: [Function: aggregate],
  is_node: true,
  index_by: [Function: indexBy],
  group_by: [Function: groupBy],
  filter_by: [Function: filterBy],
  sort_by: [Function: sortBy],
  deep_extend: [Function: deepExtend],
  un_camel_case: [Function: unCamelCase],
  is_number: [Function: isFinite],
  is_array: [Function: isArray],
  is_object: [Function: isObject],
  is_string: [Function: isString],
  is_string_coercible: [Function: isStringCoercible],
  is_dictionary: [Function: isDictionary],
  has_props: [Function: hasProps],
  as_float: [Function: asFloat],
  as_integer: [Function: asInteger],
  safe_float: [Function: safeFloat],
  safe_integer: [Function: safeInteger],
  safe_value: [Function: safeValue],
  safe_string: [Function: safeString],
  to_fixed: [Function: toFixed],
  precision_from_string: [Function: precisionFromString],
  string_to_binary: [Function: stringToBinary],
  string_to_base64: [Function: stringToBase64],
  utf16_to_base64: [Function: utf16ToBase64],
  base64_to_binary: [Function: base64ToBinary],
  base64_to_string: [Function: base64ToString],
  binary_to_string: [Function: binaryToString],
  binary_concat: [Function: binaryConcat],
  urlencode_base64: [Function: urlencodeBase64],
  set_timeout_safe: [Function: setTimeout_safe],
  timed_out: [Function: TimedOut],
  encode: [Function: encode],
  decode: [Function: decode],
  nodeVersion: '8.9.4',
  options:
   { recvWindow: 5000,
     timeDifference: 0,
     adjustForTimeDifference: false },
  userAgents:
   { chrome: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',
     chrome39: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36' },
  headers: {},
  proxy: '',
  origin: '*',
  iso8601: [Function],
  parse8601: [Function],
  parseDate: [Function],
  microseconds: [Function],
  seconds: [Function],
  substituteCommonCurrencyCodes: true,
  fetchImplementation: [Function],
  verbose: false,
  debug: false,
  journal: 'debug.json',
  userAgent: undefined,
  twofa: false,
  apiKey: undefined,
  secret: undefined,
  uid: undefined,
  login: undefined,
  password: undefined,
  balance: {},
  orderbooks: {},
  tickers: {},
  orders: {},
  trades: {},
  last_http_response: undefined,
  last_json_response: undefined,
  last_response_headers: undefined,
  arrayConcat: [Function],
  node_version: '8.9.4',
  user_agents:
   { chrome: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',
     chrome39: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36' },
  parse_date: [Function],
  substitute_common_currency_codes: true,
  fetch_implementation: [Function],
  user_agent: undefined,
  api_key: undefined,
  array_concat: [Function],
  constructor: [Function: binance],
  describe: [Function: describe],
  milliseconds: [Function: milliseconds],
  load_time_difference: [AsyncFunction: loadTimeDifference],
  fetch_markets: [AsyncFunction: fetchMarkets],
  calculate_fee: [Function: calculateFee],
  fetch_balance: [AsyncFunction: fetchBalance],
  fetch_order_book: [AsyncFunction: fetchOrderBook],
  parse_ticker: [Function: parseTicker],
  fetch_ticker: [AsyncFunction: fetchTicker],
  parse_tickers: [Function: parseTickers],
  fetch_bid_asks: [AsyncFunction: fetchBidAsks],
  fetch_tickers: [AsyncFunction: fetchTickers],
  parse_ohlcv: [Function: parseOHLCV],
  fetch_ohlcv: [AsyncFunction: fetchOHLCV],
  parse_trade: [Function: parseTrade],
  fetch_trades: [AsyncFunction: fetchTrades],
  parse_order_status: [Function: parseOrderStatus],
  parse_order: [Function: parseOrder],
  create_order: [AsyncFunction: createOrder],
  fetch_order: [AsyncFunction: fetchOrder],
  fetch_orders: [AsyncFunction: fetchOrders],
  fetch_open_orders: [AsyncFunction: fetchOpenOrders],
  fetch_closed_orders: [AsyncFunction: fetchClosedOrders],
  cancel_order: [AsyncFunction: cancelOrder],
  fetch_my_trades: [AsyncFunction: fetchMyTrades],
  common_currency_code: [Function: commonCurrencyCode],
  fetch_deposit_address: [AsyncFunction: fetchDepositAddress],
  withdraw: [AsyncFunction: withdraw],
  sign: [Function: sign],
  handle_errors: [Function: handleErrors],
  get_market: [Function: getMarket],
  defaults: [Function: defaults],
  nonce: [Function: nonce],
  encode_uricomponent: [Function: encodeURIComponent],
  check_required_credentials: [Function: checkRequiredCredentials],
  init_rest_rate_limiter: [Function: initRestRateLimiter],
  define_rest_api: [Function: defineRestApi],
  fetch: [Function: fetch],
  fetch2: [AsyncFunction: fetch2],
  request: [Function: request],
  parse_json: [Function: parseJson],
  default_error_handler: [Function: defaultErrorHandler],
  handle_rest_response: [Function: handleRestResponse],
  set_markets: [Function: setMarkets],
  load_markets: [AsyncFunction: loadMarkets],
  fetch_bids_asks: [Function: fetchBidsAsks],
  fetch_currencies: [Function: fetchCurrencies],
  fetch_order_status: [AsyncFunction: fetchOrderStatus],
  account: [Function: account],
  currency: [Function: currency],
  market: [Function: market],
  market_id: [Function: marketId],
  market_ids: [Function: marketIds],
  symbol: [Function: symbol],
  extract_params: [Function: extractParams],
  implode_params: [Function: implodeParams],
  url: [Function: url],
  parse_bid_ask: [Function: parseBidAsk],
  parse_bids_asks: [Function: parseBidsAsks],
  fetch_l2_order_book: [AsyncFunction: fetchL2OrderBook],
  parse_order_book: [Function: parseOrderBook],
  get_currency_used_on_open_orders: [Function: getCurrencyUsedOnOpenOrders],
  parse_balance: [Function: parseBalance],
  fetch_partial_balance: [AsyncFunction: fetchPartialBalance],
  fetch_free_balance: [Function: fetchFreeBalance],
  fetch_used_balance: [Function: fetchUsedBalance],
  fetch_total_balance: [Function: fetchTotalBalance],
  filter_by_since_limit: [Function: filterBySinceLimit],
  parse_trades: [Function: parseTrades],
  parse_orders: [Function: parseOrders],
  filter_orders_by_symbol: [Function: filterOrdersBySymbol],
  parse_ohlcvs: [Function: parseOHLCVs],
  edit_limit_buy_order: [Function: editLimitBuyOrder],
  edit_limit_sell_order: [Function: editLimitSellOrder],
  edit_limit_order: [Function: editLimitOrder],
  edit_order: [AsyncFunction: editOrder],
  create_limit_order: [Function: createLimitOrder],
  create_market_order: [Function: createMarketOrder],
  create_limit_buy_order: [Function: createLimitBuyOrder],
  create_limit_sell_order: [Function: createLimitSellOrder],
  create_market_buy_order: [Function: createMarketBuyOrder],
  create_market_sell_order: [Function: createMarketSellOrder],
  cost_to_precision: [Function: costToPrecision],
  price_to_precision: [Function: priceToPrecision],
  amount_to_precision: [Function: amountToPrecision],
  amount_to_string: [Function: amountToString],
  amount_to_lots: [Function: amountToLots],
  fee_to_precision: [Function: feeToPrecision],
  ymd: [Function: ymd],
  ymdhms: [Function: ymdhms],
  __define_getter__: [Function: __defineGetter__],
  __define_setter__: [Function: __defineSetter__],
  has_own_property: [Function: hasOwnProperty],
  __lookup_getter__: [Function: __lookupGetter__],
  __lookup_setter__: [Function: __lookupSetter__],
  is_prototype_of: [Function: isPrototypeOf],
  property_is_enumerable: [Function: propertyIsEnumerable],
  to_string: [Function: toString],
  value_of: [Function: valueOf],
  to_locale_string: [Function: toLocaleString],
  id: 'binance',
  name: 'Binance',
  countries: 'JP',
  enableRateLimit: false,
  rateLimit: 500,
  has:
   { CORS: false,
     publicAPI: true,
     privateAPI: true,
     cancelOrder: true,
     cancelOrders: false,
     createDepositAddress: false,
     createOrder: true,
     deposit: false,
     editOrder: 'emulated',
     fetchBalance: true,
     fetchBidsAsks: true,
     fetchClosedOrders: true,
     fetchCurrencies: false,
     fetchDepositAddress: true,
     fetchFundingFees: false,
     fetchL2OrderBook: true,
     fetchMarkets: true,
     fetchMyTrades: true,
     fetchOHLCV: true,
     fetchOpenOrders: true,
     fetchOrder: true,
     fetchOrderBook: true,
     fetchOrderBooks: false,
     fetchOrders: true,
     fetchTicker: true,
     fetchTickers: true,
     fetchTrades: true,
     withdraw: true },
  urls:
   { logo: 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
     api:
      { web: 'https://www.binance.com',
        wapi: 'https://api.binance.com/wapi/v3',
        public: 'https://api.binance.com/api/v1',
        private: 'https://api.binance.com/api/v3',
        v3: 'https://api.binance.com/api/v3',
        v1: 'https://api.binance.com/api/v1' },
     www: 'https://www.binance.com',
     doc: 'https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md',
     fees:
      [ 'https://binance.zendesk.com/hc/en-us/articles/115000429332',
        'https://support.binance.com/hc/en-us/articles/115000583311' ] },
  api:
   { web: { get: [Array] },
     wapi: { post: [Array], get: [Array] },
     v3: { get: [Array] },
     public: { get: [Array] },
     private: { get: [Array], post: [Array], delete: [Array] },
     v1: { put: [Array], post: [Array], delete: [Array] } },
  requiredCredentials:
   { apiKey: true,
     secret: true,
     uid: false,
     login: false,
     password: false },
  markets: undefined,
  currencies: {},
  timeframes:
   { '1m': '1m',
     '3m': '3m',
     '5m': '5m',
     '15m': '15m',
     '30m': '30m',
     '1h': '1h',
     '2h': '2h',
     '4h': '4h',
     '6h': '6h',
     '8h': '8h',
     '12h': '12h',
     '1d': '1d',
     '3d': '3d',
     '1w': '1w',
     '1M': '1M' },
  fees:
   { trading: { tierBased: false, percentage: true, taker: 0.001, maker: 0.001 },
     funding:
      { tierBased: false,
        percentage: false,
        withdraw: [Object],
        deposit: [Object] } },
  parseJsonResponse: true,
  skipJsonOnStatusCodes: [],
  exceptions:
   { '-2010': [Function: InsufficientFunds],
     '-2011': [Function: OrderNotFound],
     '-1013': [Function: InvalidOrder],
     '-1100': [Function: InvalidOrder],
     '-1021': [Function: InvalidNonce] },
  dontGetUsedBalanceFromStaleCache: false,
  hasCORS: false,
  hasPublicAPI: true,
  hasPrivateAPI: true,
  hasCancelOrder: true,
  hasCancelOrders: false,
  hasCreateDepositAddress: false,
  hasCreateOrder: true,
  hasDeposit: false,
  hasEditOrder: true,
  hasFetchBalance: true,
  hasFetchBidsAsks: true,
  hasFetchClosedOrders: true,
  hasFetchCurrencies: false,
  hasFetchDepositAddress: true,
  hasFetchFundingFees: false,
  hasFetchL2OrderBook: true,
  hasFetchMarkets: true,
  hasFetchMyTrades: true,
  hasFetchOHLCV: true,
  hasFetchOpenOrders: true,
  hasFetchOrder: true,
  hasFetchOrderBook: true,
  hasFetchOrderBooks: false,
  hasFetchOrders: true,
  hasFetchTicker: true,
  hasFetchTickers: true,
  hasFetchTrades: true,
  hasWithdraw: true,
  webGetExchangePublicProduct: [AsyncFunction: partial],
  web_get_exchange_public_product: [AsyncFunction: partial],
  wapiPostWithdraw: [AsyncFunction: partial],
  wapi_post_withdraw: [AsyncFunction: partial],
  wapiGetDepositHistory: [AsyncFunction: partial],
  wapi_get_deposithistory: [AsyncFunction: partial],
  wapiGetWithdrawHistory: [AsyncFunction: partial],
  wapi_get_withdrawhistory: [AsyncFunction: partial],
  wapiGetDepositAddress: [AsyncFunction: partial],
  wapi_get_depositaddress: [AsyncFunction: partial],
  wapiGetAccountStatus: [AsyncFunction: partial],
  wapi_get_accountstatus: [AsyncFunction: partial],
  wapiGetSystemStatus: [AsyncFunction: partial],
  wapi_get_systemstatus: [AsyncFunction: partial],
  v3GetTickerPrice: [AsyncFunction: partial],
  v3_get_ticker_price: [AsyncFunction: partial],
  v3GetTickerBookTicker: [AsyncFunction: partial],
  v3_get_ticker_bookticker: [AsyncFunction: partial],
  publicGetExchangeInfo: [AsyncFunction: partial],
  public_get_exchangeinfo: [AsyncFunction: partial],
  publicGetPing: [AsyncFunction: partial],
  public_get_ping: [AsyncFunction: partial],
  publicGetTime: [AsyncFunction: partial],
  public_get_time: [AsyncFunction: partial],
  publicGetDepth: [AsyncFunction: partial],
  public_get_depth: [AsyncFunction: partial],
  publicGetAggTrades: [AsyncFunction: partial],
  public_get_aggtrades: [AsyncFunction: partial],
  publicGetKlines: [AsyncFunction: partial],
  public_get_klines: [AsyncFunction: partial],
  publicGetTicker24hr: [AsyncFunction: partial],
  public_get_ticker_24hr: [AsyncFunction: partial],
  publicGetTickerAllPrices: [AsyncFunction: partial],
  public_get_ticker_allprices: [AsyncFunction: partial],
  publicGetTickerAllBookTickers: [AsyncFunction: partial],
  public_get_ticker_allbooktickers: [AsyncFunction: partial],
  publicGetTickerPrice: [AsyncFunction: partial],
  public_get_ticker_price: [AsyncFunction: partial],
  publicGetTickerBookTicker: [AsyncFunction: partial],
  public_get_ticker_bookticker: [AsyncFunction: partial],
  privateGetOrder: [AsyncFunction: partial],
  private_get_order: [AsyncFunction: partial],
  privateGetOpenOrders: [AsyncFunction: partial],
  private_get_openorders: [AsyncFunction: partial],
  privateGetAllOrders: [AsyncFunction: partial],
  private_get_allorders: [AsyncFunction: partial],
  privateGetAccount: [AsyncFunction: partial],
  private_get_account: [AsyncFunction: partial],
  privateGetMyTrades: [AsyncFunction: partial],
  private_get_mytrades: [AsyncFunction: partial],
  privatePostOrder: [AsyncFunction: partial],
  private_post_order: [AsyncFunction: partial],
  privatePostOrderTest: [AsyncFunction: partial],
  private_post_order_test: [AsyncFunction: partial],
  privateDeleteOrder: [AsyncFunction: partial],
  private_delete_order: [AsyncFunction: partial],
  v1PutUserDataStream: [AsyncFunction: partial],
  v1_put_userdatastream: [AsyncFunction: partial],
  v1PostUserDataStream: [AsyncFunction: partial],
  v1_post_userdatastream: [AsyncFunction: partial],
  v1DeleteUserDataStream: [AsyncFunction: partial],
  v1_delete_userdatastream: [AsyncFunction: partial],
  tokenBucket:
   { refillRate: 0.002,
     delay: 1,
     capacity: 1,
     defaultCost: 1,
     maxCapacity: 1000 },
  executeRestRequest: [Function] }